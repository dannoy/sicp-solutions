(define (square a)
  (* a a)
 )

(define (even? n)
  (= (remainder n 2) 0)
  )

(define (fast-exp b n)
  (cond ((= n 0) 1)
	((even? n) (square (fast-exp b (/ n 2))))
	(else (* b (fast-exp b (- n 1))))
   )
  )

(define (fast-exp-iter b n)
  (define (fast-exp-iter-inner b n a)
    (cond ((= n 0) a)
	  ((even? n) (fast-exp-iter-inner (square b) (/ n 2) a))
	  (else (fast-exp-iter-inner b (- n 1) (* a b)))
	)
  )
  (fast-exp-iter-inner b n 1)
  )